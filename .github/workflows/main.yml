name: Node.js CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'
          #cache: 'npm'

      - name: Install dependencies
        run: cd payment/api && npm install

      - name: Run tests
        run: cd payment/api && npm run test rateLimiter

  build_payment_api:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image for payment-api
        uses: docker/build-push-action@v2
        with:
          context: ./payment/api
          file: ./payment/api/Dockerfile
          push: true
          tags: popokola/payment-api:latest
  
  build_psp_server:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image for payment-api
        uses: docker/build-push-action@v2
        with:
          context: ./psp
          file: ./psp/Dockerfile
          push: true
          tags: popokola/psp-server:latest

  build_payment_front:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image for payment-front
        uses: docker/build-push-action@v2
        with:
          context: ./payment/front
          file: ./payment/front/Dockerfile
          push: true
          tags: popokola/payment-front:latest
  
  build_merchant_front:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image for merchant-front
        uses: docker/build-push-action@v2
        with:
          context: ./merchant/front
          file: ./merchant/front/Dockerfile
          push: true
          tags: popokola/merchant-front:latest

  deploy_to_serv:
    runs-on: ubuntu-latest
    needs: [build_payment_api, build_payment_front, build_merchant_front]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
      - name: Install SSHpass
        run: sudo apt-get update && sudo apt-get install -y sshpass
      - name: Copy docker-compose.prod.yml to the server
        run: |
          sshpass -p "${{ secrets.PASSWORD }}" scp -o StrictHostKeyChecking=no docker-compose.prod.yml ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/app/
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            docker compose -f /home/app/docker-compose.prod.yml down --remove-orphans
            docker compose -f /home/app/docker-compose.prod.yml up -d --build
          
